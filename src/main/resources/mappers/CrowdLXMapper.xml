<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="CrowdLXMapper">
	
	<select id="getWorkerInfo" parameterType="workerDto" resultType="workerDto">
        SELECT 
        	worker_id
        	<!-- , sns_id -->
        	, name
        	, email
        	, birth
        	, phone
        	, sex
        	, age
        	, address
        	, user_id
        	, bank_code
        	, bank_name
        	, bank_acct
        	, stdt_no
        	, level
		FROM worker_info
		<where>		
		<if test="user_id != null">AND user_id = #{user_id} </if>
		<if test="passwd != null">AND passwd = SHA2(#{passwd}, 256) </if>		
		</where>		
	</select>
	
	<select id="getWorkerMissionCnt" parameterType="workerDto" resultType="workerDto">
        select 
			count(*) as mission_cnt
		from result_info
		where worker_id = #{worker_id} and eval_result = 'Y'
	</select>
	
	<insert id="insertWorkerInfo" parameterType="workerDto">
		INSERT INTO worker_info (
			user_id
			, passwd
			, name
			<!-- , sns_id -->
			, email
			, birth
			, phone
			, sex
			, age
			, address
			, bank_code
			, bank_name
			, bank_acct
			, stdt_no
			, level
		) VALUES (
			#{user_id}
			, SHA2(#{passwd}, 256)
			, #{name}
			<!-- , #{sns_id} -->
			, #{email}
			, #{birth}
			, #{phone}
			, #{sex}
			, #{age}
			, #{address}		
			, #{bank_code}
			, #{bank_name}
			, #{bank_acct}
			, #{stdt_no}
			, 10
		)
	</insert>
	
	<update id="updateWorkerInfo" parameterType="workerDto">
		UPDATE worker_info
		SET 			
			name=#{name}
			<!-- ,passwd=crypt(#{passwd}, gen_salt('bf')) -->
			, email=#{email}
			, birth=#{birth}
			, phone=#{phone}
			, sex=#{sex}
			, age=#{age}
			, address=#{address}
			, "comments"=''
			<!-- , sns_id=#{sns_id} -->
			, bank_code=#{bank_code}
			, bank_name=#{bank_name}
			, bank_acct=#{bank_acct}
			, stdt_no=#{stdt_no}
		WHERE worker_id = #{worker_id}		
	</update>
	
	<update id="updateWorkerPasswd" parameterType="workerDto">
		UPDATE worker_info
		SET 			
			passwd=SHA2(#{passwd}, 256)			
		WHERE user_id = #{user_id}		
	</update>
		
	<select id="getPretrainedList" parameterType="java.lang.String" resultType="resultMap">
        SELECT 
        	pretrained_id
        	, image_id1
        	, image_id2
        	, answer
        	, comments
		FROM pretrained_info
	</select>
	
	<select id="getPairwise" parameterType="java.lang.String" resultType="resultMap">
        SELECT 
        	pair_id
        	, image_id1
        	, image_id2
        	, task_id
        	, comments
		FROM pairwise_info
	</select>
	
	<select id="getEvalTaskList" parameterType="workerDto" resultType="resultMap">
		select
			a.*
			<if test="gname != null and 'g1'.equals(gname)">
			, case when a.pre_yn = 'N' then (select image_id1 from pairwise_info where pair_id = a.pair_id) else (select image_id1 from pretrained_info where pretrained_id = a.pair_id) end as image_id1 
			, case when a.pre_yn = 'N' then (select image_id2 from pairwise_info where pair_id = a.pair_id) else (select image_id2 from pretrained_info where pretrained_id = a.pair_id) end as image_id2
			</if>
			<if test="gname != null and 'g2'.equals(gname)">
			, case when a.pre_yn = 'N' then (select image_name1 from pairwise_230926 where pair_id = a.pair_id) else (select image_id1 from pretrained_info where pretrained_id = a.pair_id) end as image_id1 
			, case when a.pre_yn = 'N' then (select image_name2 from pairwise_230926 where pair_id = a.pair_id) else (select image_id2 from pretrained_info where pretrained_id = a.pair_id) end as image_id2
			</if>
		from task_list a		
		where a.task_id = #{task_id}
		order by a.task_order		
	</select>
	
	<select id="getTutorialTaskList" resultType="resultMap">
		select
			a.*
			, case when a.pre_yn = 'N' then (select image_name1 from pairwise_230926 where pair_id = a.pair_id) else (select image_id1 from pretrained_info where pretrained_id = a.pair_id) end as image_name1 
			, case when a.pre_yn = 'N' then (select image_name2 from pairwise_230926 where pair_id = a.pair_id) else (select image_id2 from pretrained_info where pretrained_id = a.pair_id) end as image_name2
		from tutorial_list a
		order by a.tutorial_order		
	</select>
	
	<select id="getRandomTaskIdCnt" parameterType="java.lang.String" resultType="int">
		select 
			count(*)
		from (
			select 
				distinct task_id
			from task_list
			where task_id not in (select task_id from result_info where eval_result = 'Y')
			order by task_id
		) a		
	</select>
	
	<select id="getRandomTaskId" parameterType="java.lang.String" resultType="int">
		select 
			*
		from (
			select 
				distinct task_id
			from task_list
			where task_id not in (select task_id from result_info where eval_result = 'Y')
			order by task_id
		) a
		order by rand()
		limit 1
	</select>
	
	<select id="getResultTaskList" parameterType="java.lang.String" resultType="resultMap">
		SELECT task_id
		FROM result_info	
	</select>
	
	<insert id="insertEvalResult" useGeneratedKeys="true" keyProperty="result_id" parameterType="workerDto">
		INSERT INTO result_info (
			  task_id
			, worker_id
			, eval_time
			, eval_score
			, eval_result
			, reg_date
			, comments
		) VALUES (
			  #{task_id}
			, #{worker_id}
			, #{eval_time}
			, #{eval_score}
			, #{eval_result}
			, now()
			, ''
		)		
	</insert>
	
	<insert id="insertTaskResult" parameterType="workerDto">
		INSERT INTO task_result_list (
			  task_id
			, worker_id
			, task_order
			, pair_id
			, pre_yn
			, pre_answer
			, worker_answer
			, reg_date
			, comments
			, result_id
		) VALUES (
			  #{task_id}
			, #{worker_id}
			, #{taskNum}
			, #{pair_id}
			, #{pre_yn}
			, #{answer}
			, #{worker_answer}
			, now()
			, ''
			, #{result_id}
		)
	</insert>
	
	<update id="updateTaskResult" parameterType="workerDto">
		UPDATE task_result_list
		SET 
			worker_id=#{worker_id}			
			, worker_answer=#{worker_answer}
			, result_id=(select MAX(result_id) from result_info where task_id = #{task_id} and worker_id = #{worker_id})
		WHERE task_id = #{task_id} and task_order = #{taskNum}
	</update>
	
	<update id="updateTutorialResult" parameterType="workerDto">
		UPDATE worker_info
		SET 
			tuto_sts = 'Y'
		WHERE user_id = #{user_id}
	</update>
	
	<insert id="insertData" parameterType="workerDto">
		INSERT INTO pairwise_test2 (
			image_id1
			, image_id2
		) VALUES (
			#{imgId1}
			, #{imgId2}	
		)		
	</insert>
			
	<insert id="insertTaskList" parameterType="workerDto">
		insert into task_list_tmp3 (task_id, task_order, pair_id, pre_yn, answer)
		(select 
			#{task_id} as task_id, (ROW_NUMBER() OVER()) AS task_order, b.*
		from (
			select 
				a.*
			from (
				(select pair_id, 'N' as pre_yn, '' as answer from pairwise_230926 where pair_id between #{startIdx} and #{endIdx} order by pair_id)
				union
				(SELECT pretrained_id as pair_id, 'Y' as pre_yn, answer FROM pretrained_info ORDER BY RAND() LIMIT 5)	
			) a
			ORDER BY RAND()
		) b)
	</insert>
	
	<!-- ******************************************************** -->
	<!-- Admin Page -->
	
	<select id="getTotalTaskCnt" parameterType="java.lang.String" resultType="int">
		select 
			count(a.task_id)
		from (
			select 
				distinct task_id
			from task_list
		) a
	</select>
	
	<select id="getEvalTaskCnt" parameterType="java.lang.String" resultType="int">
		select 
			count(a.task_id)
		from (
			select 
				distinct task_id
			from task_list
			where task_id in (select task_id from result_info where eval_result = 'Y')
		) a
	</select>
	
	<select id="getResultInfoList" parameterType="workerDto" resultType="resultMap">
		SELECT 
        	a.result_id
        	, a.task_id
        	, a.worker_id
        	, a.eval_time
        	, a.eval_score        	
        	, case when a.eval_result = 'Y' then '성공'
        	       when a.eval_result = 'N' then '실패' end as eval_result
        	, a.reg_date
        	, b.name
		FROM result_info a
		left join worker_info b
			on a.worker_id = b.worker_id
		<if test="worker_id != null and worker_id != 0">
		where a.worker_id = #{worker_id}
		</if> 
		order by a.result_id
	</select>
	
	
	<select id="getTaskAggList" parameterType="java.lang.String" resultType="resultMap">
		select 
			a.task_id 
			, count(b.eval_result) as eval_cnt
			, case when count(b.eval_result) > 0 then '평가완료' else '대기' end as eval_result
			, c.name as eval_worker
		from (
			select 
				task_id 
			from task_list a
			group by task_id
			order by task_id
		) a
		left join result_info b
			on a.task_id = b.task_id and b.eval_result = 'Y'
		left join worker_info c
			on b.worker_id = c.worker_id 
		group by a.task_id 
		order by a.task_id
	</select>
	
	
	<select id="getTaskIdResultList" parameterType="workerDto" resultType="resultMap">
		SELECT 
			a.task_seq
			, a.task_id
			, a.worker_id
			, a.task_order
			, a.pair_id
			, a.pre_yn
			, a.pre_answer
			, a.worker_answer
			, a.result_id
			, a.reg_date
			, b.image_id1 
			, b.image_id2 
		FROM task_result_list a
		left join pairwise_info b
			on a.pair_id = b.pair_id 
		where a.result_id = #{result_id}
		order by a.task_order
	</select>
	
	
	<select id="getUserList" parameterType="java.lang.String" resultType="resultMap">
		SELECT 
			worker_id
			, name
			, user_id
			, phone
			, sex
			, birth
			, age
			, email
			, address
			, bank_code
			, bank_acct
			, bank_name
			, stdt_no
			, level
		FROM worker_info
		where level = 10
		order by trim(name)
	</select>
	
	<!-- ******************************************************** -->
	
	
	
	<select id="getImageList" parameterType="java.lang.String" resultType="resultMap">
		SELECT 
			id
			, panoid
			, road_no
			, nn_land_renm
			, img_name
		FROM image_list_lx
		order by panoid, img_name 	
	</select>
</mapper>